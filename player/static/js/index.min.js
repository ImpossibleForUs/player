var playerApp = angular.module("playerApp", ["ngRoute"]);
playerApp.controller("playerCtrls", ["$scope", "DataList", "DataBinding", "Audio", "Player", "$timeout", function ($scope, DataList, DataBinding, Audio, Player) {
    DataBinding.dataBindFunc(0), $scope.player = Player, $scope.audio = Audio, $scope.player.active = 0, $scope.player.controllPlay($scope.player.active), $scope.player.playerSrc($scope.player.active), $scope.isSelected = function () {
        $scope.player.active = this.$index, DataBinding.dataBindFunc($scope.player.active), $scope.player.controllPlay($scope.player.active)
    }
}]), playerApp.factory("DataList", function () {
    var data = [{
        id: 0,
        artist: "以冬",
        song: "我的一个道姑朋友",
        album: "《我的一个道姑朋友》",
        songUrl: "static/music/我的一个道姑朋友.mp3",
        avatar: "static/img/wdygdgpy.png"
    }, {
        id: 1,
        artist: "戴荃",
        song: "悟空",
        album: "《悟空 (Live版》",
        songUrl: "static/music/悟空.mp3",
        avatar: "static/img/wk.png"
    }, {
        id: 2,
        artist: "王建房",
        song: "在人间",
        album: "《长安夜》",
        songUrl: "static/music/在人间.mp3",
        avatar: "static/img/zrj.png"
    }, {
        id: 3,
        artist: "简弘亦",
        song: "你就不要想起我",
        album: "《你就不要想起我 (cover田馥甄)》",
        songUrl: "static/music/你就不要想起我.mp3",
        avatar: "static/img/njbyxqw.png"
    }, {
        id: 4,
        artist: "薛之谦",
        song: "刚刚好",
        album: "《初学者》",
        songUrl: "static/music/刚刚好.mp3",
        avatar: "static/img/ggh.png"
    }, {
        id: 5,
        artist: "谢安琪",
        song: "钟无艳",
        album: "《3/8》",
        songUrl: "static/music/钟无艳.mp3",
        avatar: "static/img/zwy.png"
    }, {
        id: 6,
        artist: "赵雷",
        song: "三十岁的女人",
        album: "《吉姆餐厅》",
        songUrl: "static/music/三十岁的女人.mp3",
        avatar: "static/img/jmct.png"
    }, {
        id: 7,
        artist: "赵雷",
        song: "南方姑娘",
        album: "《赵小雷》",
        songUrl: "static/music/南方姑娘.mp3",
        avatar: "static/img/zxl.png"
    }, {
        id: 8,
        artist: "赵雷",
        song: "鼓楼",
        album: "《无法长大》",
        songUrl: "static/music/鼓楼.mp3",
        avatar: "static/img/wfzd.png"
    }];
    return data
}), playerApp.factory("DataBinding", ["$rootScope", "DataList", function ($rootScope, DataList) {
    $rootScope.datas = DataList;
    var dataObj = {
        dataBindFunc: function (index) {
            $rootScope.avatar = $rootScope.datas[index].avatar, $rootScope.artist = $rootScope.datas[index].artist, $rootScope.song = $rootScope.datas[index].song, $rootScope.album = $rootScope.datas[index].album
        }
    };
    return dataObj
}]), playerApp.factory("Audio", ["$document", function ($document) {
    var audio = $document[0].createElement("audio");
    return audio
}]), playerApp.factory("Player", ["$rootScope", "$interval", "Audio", "DataList", "DataBinding", function ($rootScope, $interval, Audio, DataList, DataBinding) {
    $rootScope.data = DataList;
    var player = {
        musicLen: "9", controllPlay: function (index) {
            player.playerSrc(index), player.play(), player.isPlay = !0, DataBinding.dataBindFunc(index), player.playing = !0
        }, playerSrc: function (index) {
            var url = $rootScope.data[index].songUrl;
            Audio.src = url
        }, play: function () {
            player.playing && player.stop(), Audio.play(), player.isPlay = !0, player.playing = !0
        }, stop: function () {
            player.playing && Audio.pause(), player.isPlay = !1, player.playing = !1
        }, prev: function () {
            console.log("prev:" + player.active), 0 == player.active ? player.active = player.musicLen - 1 : player.active -= 1, player.controllPlay(player.active)
        }, next: function () {
            console.log("next:" + player.active), player.active == player.musicLen - 1 ? player.active = 0 : player.active += 1, player.controllPlay(player.active)
        }
    };
    return player
}]), playerApp.directive("musicMode", ["$timeout", "$document", function ($timeout, $document) {
    return {
        restrict: "AE",
        replace: !0,
        scope: {player: "=", audio: "="},
        templateUrl: "tpls/mode.html",
        link: function (scope, ele) {
            var status = "list";
            scope.addActive = function (index) {
                ele.children("li").removeClass("active"), ele.children("li").eq(index).addClass("active")
            }, scope.addActive(0), scope.listPlay = function () {
                status = "list", console.log("list"), scope.addActive(0)
            }, scope.randomPlay = function () {
                console.log("random"), status = "random", scope.addActive(1)
            }, scope.repeatPlay = function () {
                status = "repeat", console.log("repeat"), scope.addActive(2)
            }, scope.audio.addEventListener("ended", function () {
                if ("list" == status) scope.player.active == scope.player.musicLen - 1 ? scope.player.active = 0 : scope.player.active += 1; else if ("random" == status) {
                    var randomIndex = parseInt(scope.player.musicLen * Math.random());
                    console.log("randomPlay" + randomIndex), randomIndex == scope.player.active && (randomIndex += 1), scope.player.active = randomIndex
                } else console.log("repeat");
                scope.$apply(scope.player.controllPlay(scope.player.active))
            });
            var volTime;
            scope.volShow = !1, scope.showVol = function () {
                scope.volShow = !0, clearTimeout(volTime)
            }, scope.hideVol = function () {
                volTime = $timeout(function () {
                    scope.volShow = !1
                }, 300)
            }, scope.volStyle = "height: 64px", scope.audio.volume = .8, scope.adjustVolume = function (ev) {
                var event = window.event || ev, volumeY = $document[0].querySelector(".play-vol").getBoundingClientRect().bottom - event.clientY;
                scope.audio.volume = (volumeY / 75).toFixed(2), scope.volStyle = "height:" + volumeY + "px"
            }, scope.muted = !0, scope.audioMuted = function () {
                0 == scope.audio.muted ? (scope.audio.muted = !0, scope.muted = !1) : (scope.audio.muted = !1, scope.muted = !0)
            }
        }
    }
}]), playerApp.directive("progressBar", ["$document", "$interval", "$rootScope", function ($document, $interval, $rootScope) {
    return {
        restrict: "AE",
        replace: !0,
        scope: {player: "=", audio: "="},
        templateUrl: "tpls/progress.html",
        link: function (scope) {
            console.log($rootScope), scope.surplusBar = function () {
                if (!isNaN(scope.audio.duration)) {
                    var surplus = scope.audio.duration - scope.audio.currentTime, surplusMin = parseInt(surplus / 60), surplusSecond = parseInt(surplus % 60);
                    10 > surplusSecond && (surplusSecond = "0" + surplusSecond), scope.playTime = "-" + surplusMin + ":" + surplusSecond;
                    var progressValue = scope.audio.currentTime / scope.audio.duration * 1e3;
                    scope.surplusWidth = "width:" + parseInt(progressValue) + "px"
                }
            }, scope.bufferBar = function () {
                bufferTimer = $interval(function () {
                    var bufferIndex = scope.audio.buffered.length;
                    if (bufferIndex > 0 && void 0 != scope.audio.buffered) {
                        var bufferValue = scope.audio.buffered.end(bufferIndex - 1) / scope.audio.duration * 1e3;
                        scope.bufferWidth = "width:" + parseInt(bufferValue) + "px", Math.abs(scope.audio.duration - scope.audio.buffered.end(bufferIndex - 1)) < 1 && (scope.bufferWidth = "width: 1000px", clearInterval(bufferTimer))
                    }
                }, 1e3)
            }, scope.adjustPorgress = function (ev) {
                var event = window.event || ev, progressX = event.clientX - $document[0].querySelector(".progress-bar").getBoundingClientRect().left;
                scope.audio.currentTime = parseInt(progressX / 1e3 * scope.audio.duration), scope.audio.removeEventListener("canplay", scope.bufferBar)
            }, scope.audio.addEventListener("timeupdate", function () {
                scope.$apply(scope.surplusBar())
            }), scope.audio.addEventListener("canplay", function () {
                scope.$apply(scope.bufferBar())
            })
        }
    }
}]), playerApp.config(function ($routeProvider) {
    $routeProvider.when("/player", {
        templateUrl: "index.html",
        controller: "playerCtrls"
    }).otherwise({redirectTo: "/player"})
});